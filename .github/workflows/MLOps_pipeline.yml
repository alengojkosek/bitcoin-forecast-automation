name: MLOps Pipeline
on:
  push:

jobs:
  fetch_btc_data:
    runs-on: ubuntu-latest

    outputs:
      sha_new: ${{steps.sha_new.outputs.SHA_NEW}}

    permissions:
      contents: write

    strategy:
      matrix:
        python-version: [ "3.9" ]

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: fetch_btc_data
        run: poetry run python src/data/fetch_data.py

      - name: Git global
        run: git config --global user.email "alen.gojkosek@student.um.si" && git config --global user.name "alengojkosek"

      - name: Git global
        run: poetry run dvc config core.autostage true

      - name: Commit data
        run: |
          cd data/raw
          poetry run dvc add raw_data.csv
          git add raw_data.csv.dvc && git commit -m'Add new raw dataset'

      - name: Push data dvc
        run: poetry run dvc push -r origin

      - name: Push changes git
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.TOKEN }}
          branch: ${{ github.ref }}

      - name: Get commit SHA and store it in GITHUB_OUTPUT
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  create_reference_and_current_data:
    runs-on: ubuntu-latest
    needs: fetch_btc_data
    outputs:
      sha_new: ${{steps.sha_new.outputs.SHA_NEW}}
    permissions:
      contents: write

    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - env:
          SHA_NEW: ${{ needs.fetch_btc_data.outputs.sha_new }}
        run: echo "$SHA_NEW"
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.fetch_btc_data.outputs.sha_new }}
          fetch-depth: 0
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: workaround for detached HEAD
        run: |
          git checkout ${GITHUB_REF#refs/heads/}


      - name: Pull data from DVC
        run: poetry run dvc pull -r origin -f

      - name: raw data to current_data
        run: mv data/raw/raw_data.csv data/current_data.csv

      - name: Pull data from DVC
        run: poetry run dvc pull -r origin -f

      - name: raw data dvc to reference_data
        run: mv data/raw/raw_data.csv data/reference_data.csv

      - name: Git global
        run: git config --global user.email "alen.gojkosek@student.um.si" && git config --global user.name "alengojkosek"
      
      - name: Commit data
        run: |
          cd data/
          if ! git diff --quiet; then
            poetry run dvc add current_data.csv reference_data.csv
            git add current_data.csv.dvc reference_data.csv.dvc .gitignore && git commit -m 'Add current and reference dataset'
          else
            echo "Branch is up to date. Skipping commit."
          fi

      - name: Push changes git
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.TOKEN }}
          branch: ${{ github.ref }}

      - name: Push data dvc
        run: poetry run dvc push -r origin

      - name: Get commit SHA and store it in GITHUB_OUTPUT
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"


  validate_data:
    runs-on: ubuntu-latest
    needs: create_reference_and_current_data
    outputs:
      sha_new: ${{steps.sha_new.outputs.SHA_NEW}}
    permissions:
      contents: write

    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - env:
          SHA_NEW: ${{ needs.create_reference_and_current_data.outputs.sha_new }}
        run: echo "$SHA_NEW"
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.create_reference_and_current_data.outputs.sha_new }}
          fetch-depth: 0
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Pull data from DVC
        run: poetry run dvc pull -r origin -f

      #- name: Run Checkpoint
       # run: |
        #  poetry run python great_expectations/checkpoints/run_my_checkpoint.py

    #  - name: Deploy to Netlify
     #   uses: nwtgck/actions-netlify@v1.2
      #  with:
       #   publish-dir: "great_expectations/uncommitted/data_docs/local_site"
        #  production-deploy: true
        #env:
         # NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          #NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  test_data:
    runs-on: ubuntu-latest
    needs: validate_data
    outputs:
      sha_new: ${{steps.sha_new.outputs.SHA_NEW}}
    permissions:
      contents: write

    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - env:
          SHA_NEW: ${{ needs.validate_data.outputs.sha_new }}
        run: echo "$SHA_NEW"
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.validate_data.outputs.sha_new }}
          fetch-depth: 0
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Pull data from DVC
        run: poetry run dvc pull -r origin -f

      #- name: Run Evidently
       # run: |
        #  poetry run python src/data/evidently_file.py

      #- name: Deploy to Netlify
       # uses: nwtgck/actions-netlify@v1.2
        #with:
         # publish-dir: "src/reports"
          #production-deploy: true
        #env:
         # NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
          #NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID2 }}

      - name: Get commit SHA and store it in GITHUB_OUTPUT
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"

  train_model:
    runs-on: ubuntu-latest
    needs: test_data

    outputs:
      sha_new: ${{steps.sha_new.outputs.SHA_NEW}}
    permissions:
      contents: write

    strategy:
      matrix:
        python-version: [ "3.9" ]
    steps:
      - env:
          SHA_NEW: ${{ needs.test_data.outputs.sha_new }}
        run: echo "$SHA_NEW"
      - uses: actions/checkout@v3
        with:
          ref: ${{ needs.test_data.outputs.sha_new }}
          fetch-depth: 0
      - name: Install Poetry
        uses: snok/install-poetry@v1
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          cache: poetry
      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Pull data from DVC
        run: poetry run dvc pull -r origin -f

      - name: train model
        run: poetry run python src/models/train_model.py

      - name: Git global
        run: git config --global user.email "alen.gojkosek@student.um.si" && git config --global user.name "alengojkosek"

      - name: dvc autostage
        run: poetry run dvc config core.autostage true

      - name: Commit data
        run: |
          cd data/predictions
          poetry run dvc add future_data.csv
          git add future_data.csv.dvc && git commit -m'Add new future data predictions'

      - name: Push data dvc
        run: poetry run dvc push -r origin

      - name: Push changes git
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.TOKEN }}
          branch: ${{ github.ref }}

      - name: Get commit SHA and store it in GITHUB_OUTPUT
        id: sha_new
        run: echo "SHA_NEW=$(git rev-parse HEAD)" >> "$GITHUB_OUTPUT"